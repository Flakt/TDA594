/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 28 15:40:40 GMT 2019
 */

package robots;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import robots.ConfigurationManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConfigurationManager_ESTest extends ConfigurationManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConfigurationManager configurationManager0 = ConfigurationManager.getInstance();
      // Undeclared exception!
      try { 
        configurationManager0.checkPropertyKindActive((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConfigurationManager configurationManager0 = ConfigurationManager.getInstance();
      boolean boolean0 = configurationManager0.getProperty("WallSmoothing", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConfigurationManager configurationManager0 = ConfigurationManager.getInstance();
      boolean boolean0 = configurationManager0.getProperty("SpinningRadar", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConfigurationManager configurationManager0 = ConfigurationManager.getInstance();
      boolean boolean0 = configurationManager0.checkPropertyKindActive("Robot");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConfigurationManager configurationManager0 = ConfigurationManager.getInstance();
      boolean boolean0 = configurationManager0.getProperty("&?}");
      boolean boolean1 = configurationManager0.checkPropertyKindActive("]");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConfigurationManager configurationManager0 = ConfigurationManager.getInstance();
      boolean boolean0 = configurationManager0.getProperty("WallSmoothing", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConfigurationManager configurationManager0 = ConfigurationManager.getInstance();
      boolean boolean0 = configurationManager0.getProperty("SpinningRadar", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConfigurationManager configurationManager0 = ConfigurationManager.getInstance();
      configurationManager0.getProperty("WallSmoothing");
      boolean boolean0 = configurationManager0.getProperty("WallSmoothing", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConfigurationManager configurationManager0 = ConfigurationManager.getInstance();
      boolean boolean0 = configurationManager0.checkPropertyKindActive("");
      boolean boolean1 = configurationManager0.getProperty("SpinningRadar");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConfigurationManager configurationManager0 = ConfigurationManager.getInstance();
      assertNotNull(configurationManager0);
      
      boolean boolean0 = configurationManager0.getProperty("Gv_)v3T!z*jP=LinearTargeting=false", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConfigurationManager configurationManager0 = ConfigurationManager.getInstance();
      ConfigurationManager configurationManager1 = ConfigurationManager.getInstance();
      assertSame(configurationManager1, configurationManager0);
  }
}
