/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 28 15:42:25 GMT 2019
 */

package robots;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import gun.CircularTargeting;
import gun.GuessFactorTargeting;
import movement.MovementState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import robocode.AdvancedRobot;
import robocode.ScannedRobotEvent;
import robocode.robotinterfaces.peer.IBasicRobotPeer;
import robots.VariantBot;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VariantBot_ESTest extends VariantBot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VariantBot variantBot0 = new VariantBot();
      IBasicRobotPeer iBasicRobotPeer0 = mock(IBasicRobotPeer.class, new ViolatedAssumptionAnswer());
      variantBot0.setPeer(iBasicRobotPeer0);
      // Undeclared exception!
      try { 
        variantBot0.run();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // robocode.robotinterfaces.peer.IBasicRobotPeer$MockitoMock$1820842646 cannot be cast to robocode.robotinterfaces.peer.IAdvancedRobotPeer
         //
         verifyException("robocode._AdvancedRadiansRobot", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      VariantBot variantBot0 = new VariantBot();
      CircularTargeting circularTargeting0 = new CircularTargeting(variantBot0);
      variantBot0.setGun(circularTargeting0);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent();
      // Undeclared exception!
      try { 
        variantBot0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // You cannot call the getEnergy() method before your run() method is called, or you are using a Robot object that the game doesn't know about.
         //
         verifyException("robocode._RobotBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VariantBot variantBot0 = new VariantBot();
      GuessFactorTargeting guessFactorTargeting0 = new GuessFactorTargeting(variantBot0);
      IBasicRobotPeer iBasicRobotPeer0 = mock(IBasicRobotPeer.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(iBasicRobotPeer0).getBodyHeading();
      doReturn(0.0).when(iBasicRobotPeer0).getGunHeading();
      doReturn(0.0).when(iBasicRobotPeer0).getX();
      doReturn(0.0).when(iBasicRobotPeer0).getY();
      variantBot0.setPeer(iBasicRobotPeer0);
      variantBot0.setGun(guessFactorTargeting0);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent();
      // Undeclared exception!
      try { 
        variantBot0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // robocode.robotinterfaces.peer.IBasicRobotPeer$MockitoMock$1820842646 cannot be cast to robocode.robotinterfaces.peer.IAdvancedRobotPeer
         //
         verifyException("robocode._AdvancedRadiansRobot", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      VariantBot variantBot0 = new VariantBot();
      GuessFactorTargeting guessFactorTargeting0 = new GuessFactorTargeting(variantBot0);
      IBasicRobotPeer iBasicRobotPeer0 = mock(IBasicRobotPeer.class, new ViolatedAssumptionAnswer());
      doReturn((-2614.27988)).when(iBasicRobotPeer0).getBodyHeading();
      doReturn((-2614.27988)).when(iBasicRobotPeer0).getX();
      doReturn((-2614.27988)).when(iBasicRobotPeer0).getY();
      variantBot0.setPeer(iBasicRobotPeer0);
      variantBot0.setGun(guessFactorTargeting0);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent("Av=zVR1\"z", (-2614.27988), 20.0, 50.0, (-524.13), (-249.646));
      // Undeclared exception!
      try { 
        variantBot0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 124
         //
         verifyException("utils.GFTWave", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      VariantBot variantBot0 = new VariantBot();
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent();
      variantBot0.onScannedRobot(scannedRobotEvent0);
      assertEquals(0.0, scannedRobotEvent0.getRobotBearing(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      VariantBot variantBot0 = new VariantBot();
      // Undeclared exception!
      try { 
        variantBot0.run();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // You cannot call the turnRadarRightRadians() method before your run() method is called, or you are using a Robot object that the game doesn't know about.
         //
         verifyException("robocode._RobotBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      VariantBot variantBot0 = new VariantBot();
      GuessFactorTargeting guessFactorTargeting0 = new GuessFactorTargeting((AdvancedRobot) null);
      variantBot0.setGun(guessFactorTargeting0);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent();
      // Undeclared exception!
      try { 
        variantBot0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gun.GuessFactorTargeting", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      VariantBot variantBot0 = new VariantBot();
      MovementState movementState0 = variantBot0.getMovement();
      assertNull(movementState0);
  }
}
