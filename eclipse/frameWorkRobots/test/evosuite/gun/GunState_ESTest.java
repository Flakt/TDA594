/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 28 15:58:34 GMT 2019
 */

package gun;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import robocode.AdvancedRobot;
import robocode.ScannedRobotEvent;
import robocode.robotinterfaces.peer.IBasicRobotPeer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GunState_ESTest extends GunState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CircularTargeting circularTargeting0 = new CircularTargeting((AdvancedRobot) null);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent("", 0.0, 0.0, 1683.202, 0.0, 0.0);
      // Undeclared exception!
      try { 
        circularTargeting0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gun.CircularTargeting", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      GuessFactorTargeting guessFactorTargeting0 = new GuessFactorTargeting(advancedRobot0);
      IBasicRobotPeer iBasicRobotPeer0 = mock(IBasicRobotPeer.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(iBasicRobotPeer0).getBodyHeading();
      doReturn(0.0).when(iBasicRobotPeer0).getGunHeading();
      doReturn(0.0).when(iBasicRobotPeer0).getX();
      doReturn(0.0).when(iBasicRobotPeer0).getY();
      advancedRobot0.setPeer(iBasicRobotPeer0);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent("", 2590.58607957, 0.0, 1.9, 0.0, 0.0, true);
      // Undeclared exception!
      try { 
        guessFactorTargeting0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // robocode.robotinterfaces.peer.IBasicRobotPeer$MockitoMock$1237034612 cannot be cast to robocode.robotinterfaces.peer.IAdvancedRobotPeer
         //
         verifyException("robocode._AdvancedRadiansRobot", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      GuessFactorTargeting guessFactorTargeting0 = new GuessFactorTargeting(advancedRobot0);
      IBasicRobotPeer iBasicRobotPeer0 = mock(IBasicRobotPeer.class, new ViolatedAssumptionAnswer());
      doReturn((-948.9049119036968)).when(iBasicRobotPeer0).getBodyHeading();
      doReturn((-948.9049119036968)).when(iBasicRobotPeer0).getX();
      doReturn(1927.8518402236).when(iBasicRobotPeer0).getY();
      advancedRobot0.setPeer(iBasicRobotPeer0);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent("", 2590.58607957, (-1440.3), 1.9, 0.0, (-1440.3), true);
      // Undeclared exception!
      try { 
        guessFactorTargeting0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 720
         //
         verifyException("utils.GFTWave", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      LinearTargeting linearTargeting0 = new LinearTargeting(advancedRobot0);
      linearTargeting0.run();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      CircularTargeting circularTargeting0 = new CircularTargeting(advancedRobot0);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent("8ex/bDew1", (-1451.1217232783054), (-5232.16032), 595.8698, 595.8698, 900.0);
      // Undeclared exception!
      try { 
        circularTargeting0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // You cannot call the getEnergy() method before your run() method is called, or you are using a Robot object that the game doesn't know about.
         //
         verifyException("robocode._RobotBase", e);
      }
  }
}
