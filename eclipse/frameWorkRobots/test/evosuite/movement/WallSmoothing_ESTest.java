/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 28 15:44:26 GMT 2019
 */

package movement;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.time.Month;
import java.util.ArrayList;
import movement.WallSmoothing;
import movement.WaveSurfing;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import robocode.AdvancedRobot;
import utils.EnemyWave;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WallSmoothing_ESTest extends WallSmoothing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      WallSmoothing wallSmoothing0 = new WallSmoothing(advancedRobot0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      point2D_Double0.x = 100.0;
      double double0 = wallSmoothing0.wallSmoothing(point2D_Double0, 0.0, 2253);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      WallSmoothing wallSmoothing0 = new WallSmoothing(advancedRobot0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      double double0 = wallSmoothing0.wallSmoothing(point2D_Double0, 0.0, 47);
      assertEquals(7.050000000000001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WallSmoothing wallSmoothing0 = new WallSmoothing((AdvancedRobot) null);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      point2D_Double0.x = (-1952.7000000000007);
      // Undeclared exception!
      wallSmoothing0.wallSmoothing(point2D_Double0, 0.0, 286);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      WallSmoothing wallSmoothing0 = new WallSmoothing(advancedRobot0);
      // Undeclared exception!
      try { 
        wallSmoothing0.wallSmoothing((Point2D.Double) null, 100.0, (-1201));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      WallSmoothing wallSmoothing0 = new WallSmoothing(advancedRobot0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      wallSmoothing0._myLocation = point2D_Double0;
      // Undeclared exception!
      try { 
        wallSmoothing0.predictPosition((EnemyWave) null, 527);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // You cannot call the getVelocity() method before your run() method is called, or you are using a Robot object that the game doesn't know about.
         //
         verifyException("robocode._RobotBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      WallSmoothing wallSmoothing0 = new WallSmoothing(advancedRobot0);
      EnemyWave enemyWave0 = new EnemyWave();
      // Undeclared exception!
      try { 
        wallSmoothing0.predictPosition(enemyWave0, (-1075));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("movement.WallSmoothing", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      WallSmoothing wallSmoothing0 = new WallSmoothing((AdvancedRobot) null);
      ArrayList<Month> arrayList0 = new ArrayList<Month>();
      Month month0 = Month.OCTOBER;
      arrayList0.add(month0);
      wallSmoothing0._enemyWaves = arrayList0;
      // Undeclared exception!
      try { 
        wallSmoothing0.doSurfing();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.Month cannot be cast to utils.EnemyWave
         //
         verifyException("movement.WaveSurfing", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      WallSmoothing wallSmoothing0 = new WallSmoothing((AdvancedRobot) null);
      wallSmoothing0.run();
      wallSmoothing0.doSurfing();
      assertEquals(100.0, WaveSurfing._oppEnergy, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      WallSmoothing wallSmoothing0 = new WallSmoothing((AdvancedRobot) null);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      double double0 = wallSmoothing0.wallSmoothing(point2D_Double0, 0.0, (-1698));
      assertEquals((-1952.7000000000007), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      WallSmoothing wallSmoothing0 = new WallSmoothing(advancedRobot0);
      // Undeclared exception!
      try { 
        wallSmoothing0.doSurfing();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("movement.WaveSurfing", e);
      }
  }
}
